import { useEffect, useState } from 'react';
import axios from 'axios';
import './IncidentList.css';

export default function IncidentList() {
  const [incidents, setIncidents] = useState([]);
  const [loading, setLoading] = useState(false); //  –°–ø–∏–Ω–Ω–µ—Ä
  const [error, setError] = useState(''); //  –°–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
  const role = localStorage.getItem('role');
  const token = localStorage.getItem('token');

  const loadData = async () => {
    setLoading(true);
    setError('');
    try {
      await new Promise(resolve => setTimeout(resolve, 2000)); //  —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
  
      const res = await axios.get('http://localhost:5000/api/incidents');
      setIncidents(res.data);
    } catch (err) {
      const status = err.response?.status;
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
      setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö (–∫–æ–¥ ${status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'})`);
    } finally {
      setLoading(false);
    }
  };
  

  const updateStatus = async (id, newStatus) => {
    try {
      await axios.patch(
        `http://localhost:5000/api/incidents/${id}`,
        { status: newStatus },
        {
          headers: { Authorization: token },
        }
      );
      loadData();
    } catch (err) {
      const status = err.response?.status;
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞:', err);
      setError(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–∫–æ–¥ ${status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'})`);
    }
  };

  const resolveIncident = async (id) => {
    try {
      await axios.post(
        `http://localhost:5000/api/resolve/${id}`,
        {},
        {
          headers: { Authorization: token },
        }
      );
      loadData();
    } catch (err) {
      const status = err.response?.status;
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–¥–µ—Ä–∂–∞–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:', err);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–¥–µ—Ä–∂–∞–Ω–∏–∏ (–∫–æ–¥ ${status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'})`);
    }
  };

  const deleteIncident = async (id) => {
    try {
      await axios.delete(`http://localhost:5000/api/delete/${id}`, {
        headers: { Authorization: token },
      });
      loadData();
    } catch (err) {
      const status = err.response?.status;
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–∞:', err);
      setError(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ (–∫–æ–¥ ${status || '–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'})`);
    }
  };

  useEffect(() => {
    loadData();
  }, []);

  return (
    <div className="incident-list">
      <h2>üìã –ñ—É—Ä–Ω–∞–ª –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤</h2>

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ */}
      {error && <div className="error-message">‚ö† {error}</div>}

      {/* –°–ø–∏–Ω–Ω–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ */}
      {loading ? (
        <p>üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤...</p>
      ) : incidents.length === 0 ? (
        <p>–ò–Ω—Ü–∏–¥–µ–Ω—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</p>
      ) : (
        incidents.map((i) => (
          <div
            key={i.id}
            className={`incident-card ${
              i.status === '–æ—Ç–ø—É—â–µ–Ω'
                ? 'released'
                : i.resolved
                ? 'resolved'
                : 'unresolved'
            }`}
          >
            <div className="incident-description">
              <strong>[{i.type}]</strong> {i.description}
              <br />
              <strong>–°—Ç–∞—Ç—É—Å:</strong> {i.status || '–Ω–æ–≤—ã–π'} ‚Äî{' '}
              {i.status === '–æ—Ç–ø—É—â–µ–Ω' ? (
                <span className="status-released">üö™ –û—Ç–ø—É—â–µ–Ω</span>
              ) : i.resolved ? (
                <span className="status-ok">‚úÖ –∑–∞–¥–µ—Ä–∂–∞–Ω!</span>
              ) : (
                <span className="status-alert">‚ùó —Ç—Ä–µ–≤–æ–≥–∞</span>
              )}
            </div>

            {role === 'admin' && (
              <div className="buttons">
                {(!i.status || i.status === '–Ω–æ–≤—ã–π') && (
                  <>
                    <button onClick={() => updateStatus(i.id, '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ')}>üïµ –ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ</button>
                    <button className="delete" onClick={() => deleteIncident(i.id)}>
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </>
                )}

                {i.status === '–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ' && (
                  <>
                    <button onClick={() => updateStatus(i.id, '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω')}>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω</button>
                    <button onClick={() => updateStatus(i.id, '–ª–æ–∂–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞')}>‚ö† –õ–æ–∂–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞</button>
                  </>
                )}

                {i.status === '–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω' && !i.resolved && (
                  <>
                    <button onClick={() => resolveIncident(i.id)}>–ó–∞–¥–µ—Ä–∂–∞—Ç—å!</button>
                    <button className="delete" onClick={() => deleteIncident(i.id)}>
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </>
                )}

                {i.status === '–ª–æ–∂–Ω–∞—è —Ç—Ä–µ–≤–æ–≥–∞' && (
                  <>
                    <button onClick={() => updateStatus(i.id, '–æ—Ç–ø—É—â–µ–Ω')}>üö™ –û—Ç–ø—É—Å—Ç–∏—Ç—å</button>
                    <button className="delete" onClick={() => deleteIncident(i.id)}>
                      –£–¥–∞–ª–∏—Ç—å
                    </button>
                  </>
                )}
              </div>
            )}
          </div>
        ))
      )}
    </div>
  );
}
